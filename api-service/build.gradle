buildscript {
  ext {
    springBootVersion = '2.1.4.RELEASE'
    thinPlugin = 'org.springframework.boot.experimental:spring-boot-thin-gradle-plugin'
    thinVersion = '1.0.11.RELEASE'
  }
  repositories {
    mavenCentral()
    jcenter()
    maven {
      url = artifactoryRepoUrl
      credentials {
        username = artifactoryReaderUsername
        password = artifactoryReaderPassword
      }
    }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("${thinPlugin}:${thinVersion}")
  }
}

plugins {
  id "nebula.ospackage" version "3.2.0"
  id "org.sonarqube" version "2.7"
}

apply plugin: "jacoco"
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nebula.ospackage'
apply plugin: 'org.springframework.boot.experimental.thin-launcher'
apply plugin: 'org.sonarqube'


group = 'com.revx.api'

version = '1.0.0-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  jcenter()
  maven {
    url = artifactoryRepoUrl
    credentials {
      username = artifactoryReaderUsername
      password = artifactoryReaderPassword
    }
  }
}

configurations {
  compile.exclude module: 'spring-boot-starter-logging'
}
dependencies {
  compile project(':api-common')
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.springframework.boot:spring-boot-starter-log4j2'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
  compile 'io.jsonwebtoken:jjwt:0.9.0'
  compile( 'org.springframework.security:spring-security-config')
  compile( 'org.springframework.security:spring-security-ldap')
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  compile (group: 'com.microsoft.azure', name: 'adal4j', version: '1.6.0') {
    exclude group: 'net.minidev', module: 'json-smart'
  }
  compile (group: 'com.nimbusds', name: 'oauth2-oidc-sdk', version: '5.24.1') {
    exclude group: 'net.minidev', module: 'json-smart'
  }
  compile group: 'org.json', name: 'json', version: '20190722'
  compile 'mysql:mysql-connector-java'
  compile 'org.postgresql:postgresql:42.2.2'
  compile("RedshiftJDBC42:RedshiftJDBC42:1.2.1.1001")
  compile group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.5', classifier: 'runtime'

  //EHCACHE Example

  compile("net.sf.ehcache:ehcache:2.10.3")

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  compile 'org.springframework.boot:spring-boot-starter-cache'
  compile("org.springframework:spring-tx")
  compile("com.unboundid:unboundid-ldapsdk")

  compile("io.springfox:springfox-swagger2:2.9.2")
  compile("io.springfox:springfox-swagger-ui:2.9.2")
  compile("com.github.ulisesbocchio:jasypt-spring-boot:2.1.0")
  

  compile group: 'de.ruedigermoeller', name: 'fst', version: '2.57'

  compile group: 'commons-io', name: 'commons-io', version: '2.6'

  compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.9.9'

  testCompile("org.springframework.boot:spring-boot-starter-test")
  testCompile("org.springframework.security:spring-security-test")
  
  compile("joda-time:joda-time")
  compile group: 'com.googlecode.jslint4java', name: 'jslint4java', version: '2.0.5'
  compile group: 'io.humble', name: 'humble-video-all', version: '0.1.1'
  compile group: 'commons-io', name: 'commons-io', version: '2.6'
  compile('org.apache.tomcat:tomcat-jdbc:7.0.21')
  compile('commons-dbutils:commons-dbutils:1.3')
  compile 'com.google.cloud:google-cloud-bigquery:1.124.5'
  compile group: 'commons-validator', name: 'commons-validator', version: '1.4.0'
}


ospackage {
  packageName = "api-service"
  version = "1.0.0"
  release = "${new Date().format('yyyyMMdd_HH_mm_ss')}"
  //release = "${new Date().format('yyyyMMdd')}"
  os = LINUX
  type = BINARY
  arch = NOARCH

  preInstall file("scripts/rpm/preInstall.sh")
  postInstall file("scripts/rpm/postInstall.sh")
  preUninstall file("scripts/rpm/preUninstall.sh")
  postUninstall file("scripts/rpm/postUninstall.sh")

  ext.rpmpath = '/atom/api-service/releases/' + version
  into ext.rpmpath

  user "atomex"
  permissionGroup "atomex"

  from(jar.outputs.files) {
    into 'lib'
  }
  from(project.configurations.runtime) {
    into 'lib'
  }
  from(project.libsDir) {
    into 'lib'
  }
  from('scripts/') {
    into 'bin'
  }
  from(project.sourceSets.main.resources) {
    directive = 1
    into 'conf'
    exclude '*.jpg'
  }
}
buildRpm {
  dependsOn tasks['thinJar']
  addParentDirs = false
  arch = "NOARCH"
  user "atomex"
  permissionGroup "atomex"
  directory("/atom/api-service/logs")
}

//build success even when test failure occurs
test {
  ignoreFailures = true
}

sonarqube {
  properties {
    property 'sonar.projectKey','api.atomex.net'
    property 'sonar.host.url','http://localhost:9000'
    property 'sonar.login','bd79061f91c97011aaa2522c418722a6e1ac6df0'
  }
}

